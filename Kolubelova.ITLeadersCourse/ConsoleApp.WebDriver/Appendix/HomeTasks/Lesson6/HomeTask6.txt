I. Implement AppSettings logic

1. Declare class AdditionalWindowsPage
2. Declare all necessary locators to handle with buttons
3. Go to AdditionalWindows page
4. Open New browser window by clicking on New Browser Window button
5. Get New browser window url compare it with expected "https://ultimateqa.com/automation"
6. Switch to AdditionalWindows window
7. Open New message window by clicking on New Message Window button
8. Get New message window's text and compare it with expected
	"Knowledge increases by sharing but not by saving. Please share this website with your friends and in your organization."
9. Switch to AdditionalWindows window
10. Open New browser tab by clicking on New Browser Tab button
11. Get New Browser Tab title and compare it with expected "Automation Practice - Ultimate QA"
12. Switch to AdditionalWindows window
13. Close all other windows exept current

Link to Lesson 6 video: https://drive.google.com/file/d/1-V8NsvVQZCiqgL7ggPJWcT9BYmJDFHDd/view?usp=sharing


-------------------ANSWER-------------

namespace ConsoleApp.WebDriver
{
    using ConsoleApp.WebDriver.Helpers;
    using ConsoleApp.WebDriver.Pages.Lesson6AdditionalWindows;
    using System;
    using static ConsoleApp.CSharpBasics.IO.Output;
    using static ConsoleApp.WebDriver.AppSettings.SettingsCongfigurator;

    class Program : BaseTest
    {
        static void Main(string[] args)
        {

            try
            {
                var additionalWindowPage = NavigateTo<AdditionalWindowsPage>(AppDomain.CurrentDomain.BaseDirectory + Settings.Urls.UrlLesson6HomeTask);
                var additionalWindowHandle = WindowHelper.AddWindow();
                var newBrowserWindowPage = additionalWindowPage.ClickNewBrowserWindowButton();

                var newBrowserWindowHandle = WindowHelper.AddWindow();
                WindowHelper.SwitchTo(newBrowserWindowHandle);
                var expUrl = "https://ultimateqa.com/automation";


                var actUrl = newBrowserWindowPage.GetUrl(); // Get New browser window url compare it with expected

                AssertCorrectData(expUrl, actUrl);

                WindowHelper.SwitchTo(additionalWindowHandle); // Switch to AdditionalWindows window

                var newMessageWindowPage = additionalWindowPage.ClickNewMessageWindowButton(); // Open New message window
                var newMessageWindowHandle = WindowHelper.AddWindow();
                WindowHelper.SwitchTo(newMessageWindowHandle);
                var expMessage = "Knowledge increases by sharing but not by saving. Please share this website with your friends and in your organization.";
                var actMessage = newMessageWindowPage.GetMessage();

                AssertCorrectData(expMessage, actMessage);

                WindowHelper.SwitchTo(additionalWindowHandle); // 9. Switch to AdditionalWindows window

                var newBrowserTabPage = additionalWindowPage.ClickNewBrowserTabButton(); // 10. Open New browser tab by clicking 
                var newBrowserTabWindowHandle = WindowHelper.AddWindow();
                WindowHelper.SwitchTo(newBrowserTabWindowHandle);

                var actTitle = newBrowserTabPage.GetPageTitle(); //Get New Browser Tab title
                var expTitle = "Automation Practice | Ultimate QA";
                AssertCorrectData(expTitle, actTitle);

                WindowHelper.SwitchTo(additionalWindowHandle);

                WindowHelper.CloseAllBut(additionalWindowHandle);


            }
            catch (Exception)
            {
            }
            finally
            {
                DisposeTest();
            }
        }


        private static void AssertCorrectData(string expectedString, string actualString)
        {
            if (expectedString != actualString)
            {
                throw new Exception($"Actual data {actualString} is not equal to expected one {expectedString}");
            }

            else
            {
                Out.WriteLine($"Data is correct. Expected data: {expectedString}; Actual data: {actualString}");
            }
        }
    }
}

